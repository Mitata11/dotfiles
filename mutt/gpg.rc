# -*-muttrc-*-
#
# Command formats for gpg.
#
# Version notes:
#
#   GPG 2.1 introduces the option "--pinentry-mode", which requires
#   the "loopback" argument in instances where "--passphrase-fd" is
#   used.
#
#
# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as, if set, otherwise
#       $pgp_default_key.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, neomutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.

# Section A: Key Management
# Set in muttrc

# Section B: Commands

# Decode application/pgp data
set pgp_decode_command="gpg --no-verbose --batch --quiet --with-colons --status-fd=2 --output - %f"

# Verify/decrypt
set pgp_verify_command="gpg --no-verbose --quiet --batch --with-colons --status-fd=2 --output - --verify %s %f"
set pgp_decrypt_command="gpg --no-verbose --batch --with-colons --status-fd=2 --output - --decrypt %f"

# Sign/Encrypt/Both
set pgp_sign_command="gpg --no-verbose --batch --with-colons --quiet --output - --armor --textmode %?a?--local-user %a? --detach-sign %f"
set pgp_encrypt_only_command="/usr/lib/neomutt/pgpewrap gpg --no-verbose --batch --quiet --with-colons --output - --textmode --armor --encrypt -- --recipient %r -- %f"
set pgp_encrypt_sign_command="/usr/lib/neomutt/pgpewrap gpg --no-verbose --batch --quiet --with-colons --textmode --output - %?a?--local-user %a? --armor --sign --encrypt -- --recipient %r -- %f"

# Export a key
set pgp_export_command="gpg --no-verbose --batch --with-colons --armor --export %r"

# Read in the public/secret key rings
set pgp_list_pubring_command="gpg --list-keys --with-colons %r"
set pgp_list_secring_command="gpg --list-keys --with-colons %r"

# Fetch/import/verify keys
set pgp_getkeys_command="gpg --no-verbose --batch --with-colons --recv-keys %r"
set pgp_import_command="gpg --no-verbose --batch --with-colons --import %f"
set pgp_verify_key_command="gpg --no-verbose --batch --with-colons --fingerprint --check-sigs %r"

# Handle output of verifying ($pgp_verify_command)
set pgp_good_sign="^\\[GNUPG:\\] GOODSIG"

